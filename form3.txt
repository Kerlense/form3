package main

import (
    "database/sql"
    "encoding/json"
    "fmt"
    "log"
    "net/http"

    "github.com/gorilla/mux"
    _ "github.com/lib/pq"
)

const (
    DB_USER     = "root"
    DB_PASSWORD = "password"
    DB_NAME     = "postgresql"
)

// DB set up
func setupDB() *sql.DB {
    dbinfo := fmt.Sprintf("user=%s password=%s dbname=%s sslmode=disable", DB_USER, DB_PASSWORD, DB_NAME)
    db, err := sql.Open("postgres", dbinfo)

    checkErr(err)

    return DB
}

type AccountData struct {
	Attributes     *AccountAttributes `json:"attributes,omitempty"`
	ID             string             `json:"id,omitempty"`
	OrganisationID string             `json:"organisation_id,omitempty"`
	Type           string             `json:"type,omitempty"`
	Version        *int64             `json:"version,omitempty"`
}

type AccountAttributes struct {
	AccountClassification   *string  `json:"account_classification,omitempty"`
	AccountMatchingOptOut   *bool    `json:"account_matching_opt_out,omitempty"`
	AccountNumber           string   `json:"account_number,omitempty"`
	AlternativeNames        []string `json:"alternative_names,omitempty"`
	BankID                  string   `json:"bank_id,omitempty"`
	BankIDCode              string   `json:"bank_id_code,omitempty"`
	BaseCurrency            string   `json:"base_currency,omitempty"`
	Bic                     string   `json:"bic,omitempty"`
	Country                 *string  `json:"country,omitempty"`
	Iban                    string   `json:"iban,omitempty"`
	JointAccount            *bool    `json:"joint_account,omitempty"`
	Name                    []string `json:"name,omitempty"`
	SecondaryIdentification string   `json:"secondary_identification,omitempty"`
	Status                  *string  `json:"status,omitempty"`
	Switched                *bool    `json:"switched,omitempty"`
}

func main() {

    // Initiate the mux router
    r := mux.NewRouter()

// Route handles & endpoints

    // Get all account
    r.HandleFunc("/account/", GetAccount).Methods("GET")

    // Create a account
    r.HandleFunc("/account/", CreateAccount).Methods("POST")

    // Delete a account
    r.HandleFunc("/account/{account_ID}", DeleteAccount).Methods("DELETE")

       // serve the app
    fmt.Println("Server at 8080")
    log.Fatal(http.ListenAndServe(":8000", r))
}

//  errors handling
func checkErr(err error) {
    if err != nil {
        panic(err)
    }
}

// Get all account

// response and request handlers
func GetAccount(w http.ResponseWriter, r *http.Request) {
    db := setupDB()

   // Get all account from account struct table 
    rows, err := db.Query("SELECT * FROM AccountData")

    // check errors
    checkErr(err)

    // var response []JsonResponse
    var movies []AccountData 

    // Foreach AccountData 
    for rows.Next() {
        var Attributes     *AccountAttributes 
	var ID              string            
	var OrganisationID  string            
	var Type            string             
	var Version        *int64 
        err = rows.Scan(&Attributes, &ID, &OrganisationID, &Type, &Version )

        // check errors
        checkErr(err)

        movies = append(movies, AccountData{Attributes: attributes, ID;id, OrganisationID: organisationid, Type: type, Version: version})
    }

    var response = JsonResponse{Type: "success", Data: movies}

    json.NewEncoder(w).Encode(response)
}



// function Create a account

func CreateMovie(w http.ResponseWriter, r *http.Request) {
    Attributes := r.FormValue("attributes")
    OrganisationID := r.FormValue("organisationid")
    Type := r.FormValue("type")
    Version := r.FormValue("version")

    var response = JsonResponse{}

    if movieID == "" || movieName == "" {
        response = JsonResponse{Type: "error", Message: "You are missing a parameter."}
    } else {
        db := setupDB()

        fmt.Println("Inserting new account: " + movieID + " and name: " + movieName)

        var lastInsertID int
    err := db.QueryRow("INSERT INTO movies(movieID, movieName) VALUES($1, $2) returning id;", movieID, movieName).Scan(&lastInsertID)

    // check errors
    checkErr(err)

    response = JsonResponse{Type: "success", Message: "The movie has been inserted successfully!"}
    }

    json.NewEncoder(w).Encode(response)
}

// Delete a account

func DeleteMovie(w http.ResponseWriter, r *http.Request) {
    params := mux.Vars(r)

    movieID := params["organisationid"]

    var response = JsonResponse{}

    if movieID == "" {
        response = JsonResponse{Type: "error", Message: "You are missing organisationid parameter."}
    } else {
        db := setupDB()

        printMessage("Deleting account from DB")

        _, err := db.Exec("DELETE FROM movies where movieID = $1", movieID)

        // check errors
        checkErr(err)

        response = JsonResponse{Type: "success", Message: "The account has been deleted successfully!"}
    }

    json.NewEncoder(w).Encode(response)
}
